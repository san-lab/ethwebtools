package create

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
)

func TestEncodePayable(t *testing.T) {
	//uint256Ty, _ := abi.NewType("uint256", "", nil)
	bytesTy, _ := abi.NewType("bytes", "", nil)
	addressTy, _ := abi.NewType("address", "", nil)

	arguments := abi.Arguments{

		{
			Type: bytesTy,
		},
		{
			Type: addressTy,
		},
		/*
			{
				Type: uint256Ty,
			},
		*/
	}
	owner := common.HexToAddress("0x5B38Da6a701c568545dCfcB03FcB875f56beddC4")
	bytecode, _ := hex.DecodeString(bytecodeString)
	fullBytecode, err := arguments.Pack(bytecode, owner)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(hex.EncodeToString(fullBytecode))
	fmt.Println(len(fullBytecode))
	fmt.Println(len(bytecode))
	fmt.Println(len(owner.Bytes()))
}

const bytecodeString = `608060405234801561000f575f80fd5b50604051610329380380610329833981810160405281019061003191906100d4565b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100a38261007a565b9050919050565b6100b381610099565b81146100bd575f80fd5b50565b5f815190506100ce816100aa565b92915050565b5f602082840312156100e9576100e8610076565b5b5f6100f6848285016100c0565b91505092915050565b61021d8061010c5f395ff3fe60806040526004361061002c575f3560e01c806312065fe0146100375780639043282d1461006157610033565b3661003357005b5f80fd5b348015610042575f80fd5b5061004b610089565b6040516100589190610145565b60405180910390f35b34801561006c575f80fd5b50610087600480360381019061008291906101bc565b610090565b005b5f47905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100e6575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610129573d5f803e3d5ffd5b5050565b5f819050919050565b61013f8161012d565b82525050565b5f6020820190506101585f830184610136565b92915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61018b82610162565b9050919050565b61019b81610181565b81146101a5575f80fd5b50565b5f813590506101b681610192565b92915050565b5f602082840312156101d1576101d061015e565b5b5f6101de848285016101a8565b9150509291505056fea2646970667358221220cd0fb4819b4d247f30741b5f48f98a082588f658767e77bbfee826d0acba8a5664736f6c63430008180033`
