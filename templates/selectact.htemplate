{{define "selectact"}}
<style>
    body {
            font-family: Arial, sans-serif;
        }

        /* Modal styles */
        .selectact {
            display: none;
            position: fixed;
            top: 80%;
            left: 30%;
            transform: translate(-50%, -50%);
            padding: 20px;
            background-color: #fff;
            border: 1px solid #ccc;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        /* Button styles */
        .btn {
            margin-right: 10px;
            padding: 8px 16px;
            cursor: pointer;
        }

        /* Close button style */
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
        }
    </style>


<!-- Modal -->
<div id="nodeModal" class="selectact">
    <!-- Close button -->
    <span class="close" onclick="hideModal()">&times;</span>

    <!-- Modal content -->
    <div>
        <h3 id="selActHeader">Node</h3>
        <!-- Your form or content here -->
        <table>
    <tr>
     <td>User:</td><td><input type="text" id="sUserId" name="newUserId"></td>
    </tr>
    <tr>
      <td>Balance:</td><td><input type="text" id="sBalance"><span id='dueBalance'></span></td>
    </tr>
<tr>
      <td >Claimed hash:</td><td id="clHash"></td>
    </tr>
    <tr>
      <td>Calculated hash:</td><td id="caHash"></td>
    </tr>

    </table>

        <!-- Three buttons -->
        <table>
        <tr>
        <td>
        <button class="btn" onclick="update2()">Save</button>
         </td>
        <td>
        <button class="btn" onclick="recalculate()">Recalc node</button>
         </td>

          <td>
        <form method="POST">
        <button class="btn" onclick="submitAction()">Get Proof</button>
        <input type="hidden" name="action" value="Proof"/>
        <input type="hidden" name="leafid" id="leafid"/>
         <input type="hidden" id="strategy" name="strategy" />
         </form>  
         </td>
           <td>
        <button class="btn" onclick="hideModal()">Close</button>
          </td>
        </tr>
        </table>
    </div>
</div>

<script>
async function recalculate() {
  const nodeId = network.getSelectedNodes()[0];
  const node = nodes.get(nodeId);
  const recres = await calculateSumAndHash(nodeId);
  console.log("setting ", nodeId," to", node.calcHash)
  node.hash = recres.hash;
  node.balance = recres.sum;
  updateVisNode(node);
  console.log(node);
  fillModal(nodeId);
}


//Just fill the ui fields
async function fillModal(nodeId) {
  const node = nodes.get(nodeId);
  if (nodeId===undefined ) {
    return;
  }
  const modal = document.getElementById('nodeModal');
  const header = document.getElementById('selActHeader');
        header.textContent = `Node ${nodeId}`; 
  const bal = document.getElementById('sBalance');
        let edgc = network.getConnectedEdges(nodeId, 'to').length;
        bal.readOnly = (edgc > 1); //this is ugly!
        bal.value = node.balance;
  const uid =  document.getElementById('sUserId');
       uid.value = node.userId;
  const clhash = document.getElementById('clHash');
       clHash.innerHTML = `${node.hash}`;
  const cahash = document.getElementById('caHash');
        const res = await calculateSumAndHash(nodeId);
        cahash.innerHTML = `${res.hash}`;
        if (node.hash!==res.hash) {
            cahash.style.color = 'red';
       } else {
            cahash.style.color = 'green';
       }
  const due = document.getElementById('dueBalance');
      if (res.sum != node.balance) {
        due.innerHTML = `(sholud be: ${res.sum})`;
        
        
      } else {
        due.innerHTML = "";
      }
        
  const leafid = document.getElementById('leafid');
        leafid.value = node.id;

}

function checkNode(node) {
  const isLeaf = (network.getConnectedEdges(node.id).length <2);
 // console.log(node.id, "is leaf: ", isLeaf);
 

}

var strategyVar = "Sum";
var selNodeId;
async function showSelAct(nodeId) {
        const modal = document.getElementById('nodeModal');
        selNodeId = nodeId;
        const node = nodes.get(nodeId);
        await fillModal(nodeId); 
        modal.style.display = 'block';
    }

    function hideModal() {
        const modal = document.getElementById('nodeModal');
        modal.style.display = 'none';
    }

    function editFields() {
        // Implement your logic for editing fields here
        console.log('Editing fields...');
    }

    function submitAction() {
                 
        // Close the modal after handling the action
        hideModal();
    }


      
    function update2() {
      const nodeId = network.getSelectedNodes()[0];
      const newUserId = document.getElementById('sUserId').value;
      const newBalance = document.getElementById('sBalance').value;
      const node = nodes.get(nodeId);
      node.userId = newUserId;
      node.balance = newBalance;

      const nlabel = newNodeLabel(node);
      console.log(nlabel);

      
      if (nodeId !== undefined) {
        nodes.update({ id: nodeId, label: nlabel});
               
      }
      checkNode(node);
      showSelAct(nodeId);
    }

function isEditBoxVisible() {
  const box = document.getElementById("nodeModal");
  const style = window.getComputedStyle(box);
  return style.display !== 'none' && style.visibility !== 'hidden';
}

</script>


{{end}}